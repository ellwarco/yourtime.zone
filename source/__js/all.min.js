// @codekit-prepend "setbackground.js"
// @codekit-prepend "param.js"
// @codekit-prepend "moment.js"
// @codekit-prepend "moment-timezone-with-data.js"
// @codekit-prepend "cookie.js"
// @codekit-append "googleanalytics.js"

moment.calendarFormat = function(myMoment, now) {
  var diff = myMoment.diff(now, 'days', true);
  var nextMonth = now.clone().add(1, 'month');

  var retVal = diff < -200 ? 'sameElse' :
    diff < -6 ? 'withinthelast200Days' :
    diff < -1 ? 'lastWeek' :
    diff < 0 ? 'lastDay' :
    diff < 1 ? 'sameDay' :
    diff < 2 ? 'nextDay' :
    diff < 7 ? 'nextWeek' :
    diff < 200 ? 'withinthenext200Days' : 'sameElse';
  return retVal;
};

function NameUserTimezone() {
  var UserTimeZone = moment.tz.guess();
  var UserTimeZoneDisplay = UserTimeZone.name;
  var UserTimeZoneDisplay = UserTimeZone.replace(/_/g, " ");
  if (UserTimeZoneDisplay.indexOf('/') > -1) {
    //if usertimezonedisplay is like 'europe/berlin', display 'berlin' instead
    var UserTimeZoneDisplay = UserTimeZoneDisplay.split('/')[1];;
  }
  return UserTimeZoneDisplay;
}

function ParseEvent() {

  var UserTimeZoneDisplay = NameUserTimezone();
  document.getElementById("localtimezone").innerHTML = UserTimeZoneDisplay;


  //get serialized string from URL
  var currenturl = window.location.href;
  var EventSerialized = currenturl.substring(currenturl.lastIndexOf("?timeUTC") + 1, currenturl.lastIndexOf("?end"));
  console.log(EventSerialized);

  var creatorcookie = Cookies.get('creatorofevent');

  var referrer = document.referrer;

  var ErrorMessage = '<span class="introdescription"><h1>Something went wrong.</h1><span>But I still love you. Would you like to create a new event instead?</span><br><br><a style="margin-top: 7px;" href="/new" class="btn-class">Create a new event</a></span><span style="display: none;" id="localtimezone">YYY</span>';

  //if visitor is also creator
  var CurrentHost = window.location.host;
  if (creatorcookie == EventSerialized || referrer.indexOf(CurrentHost + '/share/') >= 0) {
    var script = document.createElement("script"); //Make a script DOM node
    script.src = "../__js/askforembedemail.js"; //Set it's src to the provided URL
    document.head.appendChild(script); //Add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)
    document.getElementById("createyourown").innerHTML = '<a href="javascript:;" class="createyourownbutton btn-class createyourownbuttonembed" id="embedbutton">Embed this</a>';
    document.getElementById("embedbutton").setAttribute("onclick", "ml_webform_546935('show')");
  }

  //deserialize EventSerialzed
  var Event = deparam(EventSerialized);
  console.log("The Event is " + Event);
  console.log("The time of the event is " + Event.timeUTC);
  console.log("The name of the event is " + Event.Title);

  var EventTime = moment(Event.timeUTC);
  var UserTimeZone = moment.tz.guess();
  var ConvertedEventTime = EventTime.tz(UserTimeZone).format(); // 2013-11-18T06:00:00+01:00

  var HumanLanguageConvertedEventTime = moment(ConvertedEventTime).calendar(null, {
    sameDay: '[today at] h:mm A',
    nextDay: '[tomorrow at] h:mm A',
    nextWeek: 'dddd [at] h:mm A',
    withinthenext200Days: 'MMMM Do [at] h:mm A',
    lastDay: '[yesterday at] h:mm A',
    lastWeek: '[last] dddd [at] h:mm A',
    withinthelast200Days: 'MMMM Do [at] h:mm A',
    sameElse: "MMMM Do YYYY [at] h:mm A"
  });

  document.getElementById("localtime").innerHTML = HumanLanguageConvertedEventTime;

  //if the result starts with a date
  if (EventTime.diff(now, 'days', true) > 2 || EventTime.diff(now, 'days', true) < -6) {
    document.getElementById("eventpreposition").innerHTML = " on";
  }

  //if the result is in the past, use "was" instead of "is"
  var now = moment();
  var IsEventInPast = moment(ConvertedEventTime).isBefore(now);
  if (IsEventInPast) {
    document.getElementById("eventverb").innerHTML = "started";
  }

  //display title
  document.getElementById("eventname").innerHTML = Event.Title;

  if (Event.Title == null || Event.Title == '') {
    console.log("It appears that there is not a valid title");
    document.getElementById("eventnameouter").innerHTML = "the event";
  }

  var hours = moment(ConvertedEventTime).format('H');
  setbackgroundcoloraccordingtotime(hours);

  if (Event.timeUTC == null) {
    console.log("It appears that there is not a valid event");
    document.getElementById("page").innerHTML = ErrorMessage;
  }

}



function SetBackgroundAccordingToCurrentVisitorTime() {
  var hours = moment().format('H');
  setbackgroundcoloraccordingtotime(hours);
}
